apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion rootProject.compile_sdk

  defaultConfig {
    applicationId 'me.niccorder.phunware'
    minSdkVersion rootProject.min_sdk
    targetSdkVersion rootProject.target_sdk
    versionCode 1
    versionName "1.0.0-SNAPSHOT"

    vectorDrawables.useSupportLibrary = true

    buildConfigField 'String', 'WEATHER_BASE_URL', '"https://api.darksky.net/"'
    buildConfigField 'String', 'WEATHER_API_KEY', '"eb6c2089bde2e34372974beec082cff9"'
    buildConfigField 'String', 'LOCATION_BASE_URL', '"https://www.zipcodeapi.com/"'
    buildConfigField 'String', 'LOCATION_API_KEY', '"ZBt2tDluPkHjSCRHFzrBIrcLsFAIT4tSGXV9AhEpBlItYzaE8CgR4sCw8df1iIUY"'


    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  buildTypes {
    release {
      debuggable false
      minifyEnabled true
      shrinkResources true

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      debuggable true
      minifyEnabled false
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    abortOnError false
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/rxjava.properties'
  }
}

dependencies {
  def versions = rootProject.versions

  implementation project(":model")

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"

  // Android support libraries.
  implementation "androidx.annotation:annotation:$versions.support"
  implementation "androidx.appcompat:appcompat:$versions.appcompat"
  implementation "androidx.collection:collection-ktx:$versions.support"
  implementation "androidx.cardview:cardview:$versions.cardview"
  implementation "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
  implementation "androidx.core:core-ktx:$versions.support_ktx"
  implementation "androidx.fragment:fragment:$versions.fragment"
  implementation "androidx.fragment:fragment-ktx:$versions.fragment"
  implementation "androidx.emoji:emoji-appcompat:$versions.emoji"
  implementation "androidx.emoji:emoji-bundled:$versions.emoji"
  implementation "androidx.exifinterface:exifinterface:$versions.exifinterface"
  implementation "androidx.recyclerview:recyclerview:$versions.recycler"
  implementation "com.google.android.material:material:$versions.material"

  // Android Arch. Core
  implementation "androidx.arch.core:core-runtime:$versions.architecture_core"
  implementation "androidx.arch.core:core-common:$versions.architecture_core"

  kapt "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

  kapt "androidx.room:room-compiler:$versions.room"
  implementation "androidx.room:room-runtime:$versions.room"
  implementation "androidx.room:room-common:$versions.room"
  implementation "androidx.room:room-rxjava2:$versions.room"

  implementation "com.jakewharton.timber:timber:$versions.timber"

  kapt "com.github.bumptech.glide:compiler:$versions.glide"
  implementation "com.github.bumptech.glide:glide:$versions.glide"

  kapt "com.google.dagger:dagger-compiler:$versions.dagger"
  kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
  implementation "com.google.dagger:dagger:$versions.dagger"
  implementation "com.google.dagger:dagger-android-support:$versions.dagger"
  compileOnly "javax.annotation:jsr250-api:1.0"

  implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
  implementation "io.reactivex.rxjava2:rxkotlin:$versions.rx_kotlin"
  implementation "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
  implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$versions.rx_bindings"

  implementation "com.google.code.gson:gson:$versions.gson"

  implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
  implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
  implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
  implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"

  testImplementation "junit:junit:$versions.junit"
  testImplementation "com.google.truth:truth:$versions.truth"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
  testImplementation "org.mockito:mockito-core:$versions.mockito"
  testImplementation "org.mockito:mockito-all:$versions.mockito_all"

  testImplementation "androidx.test:core:$versions.support"
  testImplementation "androidx.arch.core:core-testing:$versions.architecture_core"

  androidTestImplementation "androidx.test:core:$versions.atsl_runner"
  androidTestImplementation "androidx.test:runner:$versions.atsl_runner"
  androidTestImplementation "androidx.arch.core:core-testing:$versions.architecture_core"
  androidTestImplementation "androidx.test.espresso:espresso-core:$versions.atsl_espresso"
}